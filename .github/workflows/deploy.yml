name: Deploy to AWS Elastic Beanstalk

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'
        extensions: mbstring, dom, fileinfo, mysql, zip
        coverage: none
        
    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: ~/.composer/cache
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-composer-
          
    - name: Install Composer dependencies
      run: composer install --no-dev --optimize-autoloader --no-interaction
      
    - name: Create deployment package
      run: |
        # Crear directorio de despliegue
        mkdir -p deploy-package
        
        # Copiar archivos necesarios para Laravel
        cp -r app bootstrap config database public resources routes storage vendor composer.json composer.lock artisan deploy-package/
        
        # Las variables de entorno se manejan directamente en Elastic Beanstalk
        # No se copia ningún archivo .env al paquete de despliegue
        
        # Crear archivos de configuración de Elastic Beanstalk
        mkdir -p deploy-package/.ebextensions
        mkdir -p deploy-package/.platform
        
        # Crear Dockerfile para Elastic Beanstalk
        cat > deploy-package/Dockerfile << 'EOF'
        FROM php:8.3-fpm
        
        # Instalar dependencias del sistema
        RUN apt-get update && apt-get install -y \
            git curl libpng-dev libonig-dev libxml2-dev \
            zip unzip libzip-dev libfreetype6-dev libjpeg62-turbo-dev \
            libmcrypt-dev libgd-dev nginx supervisor \
            && apt-get clean && rm -rf /var/lib/apt/lists/*
        
        # Instalar extensiones PHP
        RUN docker-php-ext-configure gd --with-freetype --with-jpeg \
            && docker-php-ext-install pdo_mysql mbstring exif pcntl bcmath gd zip
        
        # Configurar directorio de trabajo
        WORKDIR /var/www/html
        
        # Copiar aplicación (las dependencias ya están instaladas)
        COPY . .
        
        # Configurar permisos
        RUN chown -R www-data:www-data storage bootstrap/cache \
            && chmod -R 775 storage bootstrap/cache
        
        # Configurar Nginx
        RUN echo 'server {' > /etc/nginx/sites-available/default && \
            echo '    listen 80;' >> /etc/nginx/sites-available/default && \
            echo '    index index.php index.html;' >> /etc/nginx/sites-available/default && \
            echo '    root /var/www/html/public;' >> /etc/nginx/sites-available/default && \
            echo '    location / {' >> /etc/nginx/sites-available/default && \
            echo '        try_files \$uri \$uri/ /index.php?\$query_string;' >> /etc/nginx/sites-available/default && \
            echo '    }' >> /etc/nginx/sites-available/default && \
            echo '    location ~ \.php$ {' >> /etc/nginx/sites-available/default && \
            echo '        fastcgi_pass 127.0.0.1:9000;' >> /etc/nginx/sites-available/default && \
            echo '        fastcgi_index index.php;' >> /etc/nginx/sites-available/default && \
            echo '        fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;' >> /etc/nginx/sites-available/default && \
            echo '        include fastcgi_params;' >> /etc/nginx/sites-available/default && \
            echo '    }' >> /etc/nginx/sites-available/default && \
            echo '}' >> /etc/nginx/sites-available/default
        
        # Configurar Supervisor
        RUN echo '[supervisord]' > /etc/supervisor/conf.d/supervisord.conf && \
            echo 'nodaemon=true' >> /etc/supervisor/conf.d/supervisord.conf && \
            echo '[program:php-fpm]' >> /etc/supervisor/conf.d/supervisord.conf && \
            echo 'command=php-fpm' >> /etc/supervisor/conf.d/supervisord.conf && \
            echo 'autostart=true' >> /etc/supervisor/conf.d/supervisord.conf && \
            echo 'autorestart=true' >> /etc/supervisor/conf.d/supervisord.conf && \
            echo '[program:nginx]' >> /etc/supervisor/conf.d/supervisord.conf && \
            echo 'command=nginx -g "daemon off;"' >> /etc/supervisor/conf.d/supervisord.conf && \
            echo 'autostart=true' >> /etc/supervisor/conf.d/supervisord.conf && \
            echo 'autorestart=true' >> /etc/supervisor/conf.d/supervisord.conf
        
        EXPOSE 80
        CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]
        EOF
        
        # Crear configuración de Elastic Beanstalk
        cat > deploy-package/.ebextensions/01-php.config << 'EOF'
        option_settings:
          aws:elasticbeanstalk:container:php:phpini:
            document_root: /var/www/html/public
            memory_limit: 512M
            max_execution_time: 300
            upload_max_filesize: 40M
            post_max_size: 40M
            max_input_vars: 3000
        EOF
        
        # Configuración de logs
        cat > deploy-package/.ebextensions/02-logs.config << 'EOF'
        option_settings:
          aws:elasticbeanstalk:cloudwatch:logs:
            StreamLogs: true
            DeleteOnTerminate: false
            RetentionInDays: 7
        EOF
        
        # Configuración de migraciones
        cat > deploy-package/.ebextensions/03-migrations.config << 'EOF'
        container_commands:
          01_migrate:
            command: "php artisan migrate --force"
            leader_only: true
          02_cache_clear:
            command: "php artisan config:clear && php artisan cache:clear"
            leader_only: true
          03_storage_link:
            command: "php artisan storage:link"
            leader_only: true
          04_optimize:
            command: "php artisan optimize"
            leader_only: true
        EOF
        
        # Configuración de permisos
        cat > deploy-package/.ebextensions/04-permissions.config << 'EOF'
        container_commands:
          01_permissions:
            command: "chmod -R 755 storage bootstrap/cache"
            leader_only: true
          02_ownership:
            command: "chown -R webapp:webapp storage bootstrap/cache"
            leader_only: true
        EOF
        
        # Crear archivo de configuración de Elastic Beanstalk
        cat > deploy-package/.elasticbeanstalk/config.yml << 'EOF'
        branch-defaults:
          main:
            environment: cldci-staging-env
        global:
          application_name: cldci-staging
          default_platform: Docker running on 64bit Amazon Linux 2023
          default_region: us-east-1
          include_git_submodules: true
          instance_profile: null
          platform_name: null
          platform_version: null
          profile: eb-cli
          sc: git
          workspace_type: Application
        EOF
        
        # Crear Dockerrun.aws.json para Docker en Elastic Beanstalk
        cat > deploy-package/Dockerrun.aws.json << 'EOF'
        {
          "AWSEBDockerrunVersion": "1",
          "Image": {
            "Name": "php:8.3-fpm",
            "Update": "true"
          },
          "Ports": [
            {
              "ContainerPort": "80"
            }
          ],
          "Volumes": [
            {
              "HostDirectory": "/var/app/current/storage",
              "ContainerDirectory": "/var/www/html/storage"
            }
          ],
          "Logging": "/var/log/nginx"
        }
        EOF
        
        # Comprimir el paquete
        cd deploy-package && zip -r ../deployment-package.zip . && cd ..
        
    - name: Deploy to Elastic Beanstalk
      uses: einaregilsson/beanstalk-deploy@v20
      with:
        aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        application_name: cldci-staging
        environment_name: cldci-staging-env
        region: us-east-1
        version_label: ${{ github.sha }}
        deployment_package: deployment-package.zip
        wait_for_environment_recovery: 300
        
    - name: Deployment Success Notification
      if: success()
      run: |
        echo "✅ Deployment completed successfully!"
        echo "🚀 Application deployed to: http://cldci-staging-env.eba-xphp7eqe.us-east-1.elasticbeanstalk.com"
        
    - name: Deployment Failure Notification
      if: failure()
      run: |
        echo "❌ Deployment failed!"
        echo "Please check the logs above for more details."
