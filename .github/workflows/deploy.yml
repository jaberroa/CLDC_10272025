name: Deploy Laravel to AWS Elastic Beanstalk

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'
        extensions: mbstring, dom, fileinfo, mysql, zip, gd, pdo_mysql
        coverage: none
        
    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: ~/.composer/cache
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-composer-
          
    - name: Install Composer dependencies
      run: composer install --no-dev --optimize-autoloader --no-interaction
      
    - name: Create deployment package
      run: |
        echo "🚀 Creating optimized deployment package..."
        
        # Create deployment directory
        mkdir -p deploy-package
        
        # Copy Laravel application files
        echo "📦 Copying Laravel files..."
        cp -r app bootstrap config database public resources routes storage vendor composer.json composer.lock artisan deploy-package/
        
        # Copy Dockerfile (use the real one from project)
        echo "🐳 Copying Dockerfile..."
        cp Dockerfile deploy-package/
        
        # Create .ebextensions directory
        mkdir -p deploy-package/.ebextensions
        
        # Create logs configuration
        cat > deploy-package/.ebextensions/02-logs.config << 'EOF'
        option_settings:
          aws:elasticbeanstalk:cloudwatch:logs:
            StreamLogs: true
            DeleteOnTerminate: false
            RetentionInDays: 7
        EOF
        
        # Create permissions configuration
        cat > deploy-package/.ebextensions/03-permissions.config << 'EOF'
        container_commands:
          01_permissions:
            command: "chmod -R 775 storage bootstrap/cache"
            leader_only: true
          02_ownership:
            command: "chown -R www-data:www-data storage bootstrap/cache"
            leader_only: true
          03_storage_link:
            command: "docker exec $(docker ps -q) bash -c 'cd /var/www/html && php artisan storage:link || true'"
            leader_only: true
        EOF
        
        # Create PHP configuration
        cat > deploy-package/php.ini << 'EOF'
        memory_limit = 512M
        max_execution_time = 300
        upload_max_filesize = 40M
        post_max_size = 40M
        max_input_vars = 3000
        EOF
        
        # Validate critical files
        echo "🔍 Validating critical files..."
        if [ ! -f "deploy-package/artisan" ]; then
          echo "❌ Error: artisan not found"
          exit 1
        fi
        if [ ! -f "deploy-package/Dockerfile" ]; then
          echo "❌ Error: Dockerfile not found"
          exit 1
        fi
        echo "✅ Critical files validated"
        
        # Create deployment package
        echo "📦 Creating deployment package..."
        cd deploy-package && zip -r ../deployment-package.zip . && cd ..
        
        echo "✅ Deployment package created successfully!"
        
    - name: Deploy to Elastic Beanstalk
      uses: einaregilsson/beanstalk-deploy@v20
      with:
        aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        application_name: cldci-staging
        environment_name: cldci-staging-env-new
        region: us-east-1
        version_label: ${{ github.sha }}-${{ github.run_number }}
        deployment_package: deployment-package.zip
        use_existing_version_if_available: true
        wait_for_environment_recovery: 300
        
    - name: Deployment Success Notification
      if: success()
      run: |
        echo "✅ Deployment completed successfully!"
        echo "🚀 Application deployed to AWS Elastic Beanstalk"
        
    - name: Deployment Failure Notification
      if: failure()
      run: |
        echo "❌ Deployment failed!"
        echo "Please check the logs above for more details."
