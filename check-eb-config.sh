#!/bin/bash

echo "üîç Verificando configuraci√≥n de Elastic Beanstalk..."

# Verificar que AWS CLI est√° disponible
if ! command -v aws &> /dev/null; then
    echo "‚ùå AWS CLI no est√° instalado"
    echo "Instala con: sudo snap install aws-cli"
    exit 1
fi

echo "üìä Informaci√≥n del entorno cldci-staging-env:"
echo "=============================================="

# Obtener informaci√≥n del entorno
aws elasticbeanstalk describe-environments \
    --environment-names cldci-staging-env \
    --region us-east-1 \
    --query 'Environments[0].{Name:EnvironmentName,Status:Status,Health:Health,Platform:PlatformArn}' \
    --output table

echo ""
echo "üîß Configuraci√≥n actual:"
echo "========================"

# Obtener configuraci√≥n del entorno
aws elasticbeanstalk describe-configuration-settings \
    --application-name cldci-staging \
    --environment-name cldci-staging-env \
    --region us-east-1 \
    --query 'ConfigurationSettings[0].OptionSettings[?Namespace==`aws:elasticbeanstalk:application:environment`]' \
    --output table

echo ""
echo "üìã Versiones de aplicaci√≥n:"
echo "==========================="

# Listar versiones de aplicaci√≥n
aws elasticbeanstalk describe-application-versions \
    --application-name cldci-staging \
    --region us-east-1 \
    --query 'ApplicationVersions[].{Version:VersionLabel,Created:DateCreated,Status:Status}' \
    --output table

echo ""
echo "üöÄ Para corregir el problema:"
echo "============================"
echo "1. Verifica que la plataforma sea 'Docker running on 64bit Amazon Linux 2023'"
echo "2. Aseg√∫rate de que no haya una aplicaci√≥n 'Sample' instalada"
echo "3. Configura las variables de entorno necesarias"
echo "4. Si es necesario, recrea el entorno con la configuraci√≥n correcta"
